--------------------------------------------------
Includes / PHP Class Doc Comment
/**
 * Class ${NAME}
 *
#if (${NAMESPACE}) * @package ${NAMESPACE}
#end
 * @author SRG Group <dev@srg.hu>
 * @copyright ${YEAR} SRG Group Kft.
 */
--------------------------------------------------
Includes / PHP File Header
--------------------------------------------------
Includes / PHP Interface Doc Comment
/**
 * Interface ${NAME}
 *
#if (${NAMESPACE}) * @package ${NAMESPACE}
#end
 * @author SRG Group <dev@srg.hu>
 * @copyright ${YEAR} SRG Group Kft.
 */
--------------------------------------------------
Includes / PHP Trait Doc Comment
/**
 * Trait ${NAME}
 *
#if (${NAMESPACE}) * @package ${NAMESPACE}
#end
 * @author SRG Group <dev@srg.hu>
 * @copyright ${YEAR} SRG Group Kft.
 */
--------------------------------------------------
Code / PHP Fluent Setter Method
#set($typeHintText = "$TYPE_HINT ")
## First we check against a blacklist of primitive and other common types used in documentation.
#set($nonTypeHintableTypes = ["", "mixed", "number", "void", "object", "real", "null"])
#foreach($nonTypeHintableType in $nonTypeHintableTypes)
    #if ($nonTypeHintableType == $TYPE_HINT)
        #set($typeHintText = "")
    #end
#end
## Make sure the type hint actually looks like a legal php class name(permitting namespaces too) for future proofing reasons.
## This is important because PSR-5 is coming soon, and will allow documentation of types with syntax like SplStack<int>
#if (!$TYPE_HINT.matches('^((\\)?[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]+)+$'))
    #set($typeHintText = "")
#end
## Next, we check if this is using the array syntax like "MyClass[]", and type hint it as a plain array
#if ($TYPE_HINT.endsWith("[]"))
    #set($typeHintText = "array ")
#end
#if ($TYPE_HINT.endsWith("|null"))
 #set($hintIndex = $TYPE_HINT.indexOf("|"))
 #set($paramHint = "?" + $TYPE_HINT.substring(0, $hintIndex) + " ")
#else
 #set($paramHint = $typeHintText)
#end
/**
 * Set ${NAME}
 * @param $typeHintText$${PARAM_NAME}
#if (${STATIC} != "static")
 * @return ${CLASS_NAME}
#end
 */
public ${STATIC} function set${NAME}($paramHint$${PARAM_NAME})#if (${STATIC} != "static"): ${CLASS_NAME}#end {
#if (${STATIC} == "static")
    self::$${FIELD_NAME} = $${PARAM_NAME};
#else
    $this->${FIELD_NAME} = $${PARAM_NAME};
    return $this;
#end
}

--------------------------------------------------
Code / PHP Getter Method
#set($returnType = ": $TYPE_HINT")
## First we check against a blacklist of primitive and other common types used in documentation.
#set($nonTypeHintableTypes = ["", "mixed", "number", "void", "object", "real", "double", "resource", "null"])
#foreach($nonTypeHintableType in $nonTypeHintableTypes)
    #if ($nonTypeHintableType == $TYPE_HINT)
        #set($returnType = "")
    #end
#end
## Make sure the type hint actually looks like a legal php class name(permitting namespaces too) for future proofing reasons.
## This is important because PSR-5 is coming soon, and will allow documentation of types with syntax like SplStack<int>
#if (!$TYPE_HINT.matches('^((\\)?[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]+)+$'))
    #set($returnType = "")
#end
## Next, we check if this is using the array syntax like "MyClass[]", and type hint it as a plain array
#if ($TYPE_HINT.endsWith("[]"))
    #set($returnType = ": array")
#end
/**
 * Get ${NAME}
 *
 * @return ${TYPE_HINT}
 */
public ${STATIC} function ${GET_OR_IS}${NAME}()$returnType {
#if (${STATIC} == "static")
    return self::$${FIELD_NAME};
#else
    return $this->${FIELD_NAME};
#end
}
--------------------------------------------------
Code / PHP Setter Method
#set($typeHintText = "$TYPE_HINT ")
## First we check against a blacklist of primitive and other common types used in documentation.
#set($nonTypeHintableTypes = ["", "mixed", "number", "void", "object", "real", "null"])
#foreach($nonTypeHintableType in $nonTypeHintableTypes)
    #if ($nonTypeHintableType == $TYPE_HINT)
        #set($typeHintText = "")
    #end
#end
## Make sure the type hint actually looks like a legal php class name(permitting namespaces too) for future proofing reasons.
## This is important because PSR-5 is coming soon, and will allow documentation of types with syntax like SplStack<int>
#if (!$TYPE_HINT.matches('^((\\)?[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]+)+$'))
    #set($typeHintText = "")
#end
## Next, we check if this is using the array syntax like "MyClass[]", and type hint it as a plain array
#if ($TYPE_HINT.endsWith("[]"))
    #set($typeHintText = "array ")
#end
/**
 * Set ${NAME}
 * @param $typeHintText$${PARAM_NAME}
 */
public ${STATIC} function set${NAME}($typeHintText$${PARAM_NAME}) {
#if (${STATIC} == "static")
    self::$${FIELD_NAME} = $${PARAM_NAME};
#else
    $this->${FIELD_NAME} = $${PARAM_NAME};
#end
}
--------------------------------------------------
Code / PHPUnit SetUp Method
protected function setUp() {
    parent::setUp();
}
--------------------------------------------------
Code / PHPUnit TearDown Method
protected function tearDown() {
    parent::tearDown();
}
--------------------------------------------------
Code / PHPUnit Test Method
public function test${CAPITALIZED_NAME}() {

}
--------------------------------------------------

 
